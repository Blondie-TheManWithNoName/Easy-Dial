struct node_tst {	// estructura trie, tst
	char _c;		// char que defineix la lletra que té el node
	phone _v;		// defineix el phone que guarda el node
	bool p_indef;	// ens diu si el phone del node esta indefinit o no
	node_tst* _esq;	// punter que apunta al fill node esquerre
	node_tst* _dret;// punter que apunta al fill node dret
	node_tst* _cen;	// punter que apunta al fill node central
	node_tst* _ant;	// punter que apunta al node anterior. Sent aquest
					// justament el anterior si entre el pare del node actual
};					// el node actual hi ha una relació de fill central. En
					// cas contrari el node anterior es tractarà del pare
					// del node pare del qual el fill tant esquerre com dret
					// es el node actual
vector<double> v_mitj;// vector que conté la freqüència de tots els noms

node_tst* _arrel;	// node arrel
node_tst* actTrie;	// node que apunta al actual trie que estem tractant

int totFreq;		// enter que conté la suma de totes les freqüències
					// en ordre descendent segons freqüència

struct prefix		// estructura per gestionar els prefixos
{	
	string hist;	// guarda tots el prefixos que calen per arribar al actual node que estem
	char act;		// guarda el prefix actual
	bool indef;		// ens diu si iel prefix es indefinit o no
	bool punterNULL;// ens diu si el actTrie apunta a NULL
};
prefix pre;			


// Funció  auxiliar per l'ordenació del vector amb els phones
// Pre: *cert*
// Post: retorna el vector v2 partit per la meitat alta
//i el v modificat partit per la meitat amb la part baixa
vector<phone> partir(vector<phone> &v, nat m);


// Funció  auxiliar per l'ordenació del vector amb els phones
// Pre: *cert*
// Post: fusiona dos vectors segons la freqüència dels seus
// phones, de manera descendent
vector<phone> fusionar(vector<phone> v1, vector<phone> v2);

// Funció per ordenar el vector phone
// Pre: *cert*
// Post: retorna el vector v ordenat segons la freqüència
// de cada phone en ordre descendent
// Cost: O(log(n))
// Anteriorment teniem el quick sort pero vam decidir canviar
// al merge sort per que el quick sort no es molt eficient
// en casos on el vector ja esta ordenat, i això no pasa amb
// el merge sort
void ordenar(vector<phone>& v);

// Funció per inserir un nom al trie
// Pre: *cert*
// Post: el nom ha estat inserit al tst, el phone d'aquest s'ha inserit al
// primer node amb p_indef = true i a l'ultim node del nom, que es tracta del
// char \0
node_tst* insereix(node_tst* n, nat i, const string s, const phone p, bool &inserit);

// Funció que serveix per buscar un char a un trie en concret
// Pre: *cert*
// Post: retorna el node on es troba el char, NULL si no existeix
// Cost: O(log(n))
node_tst* busca(node_tst* n, const char c) const;

//Funció auxiliar de la funció comencen
// Pre: *cert*
// Post: insereix al vector v tots els noms que conte el node n i els
// seus fills.
void noms(node_tst* n, vector<string> &v) const;


// Funció auxiliar de la destructora de la classe
// Pre: *cert*
// Post: s'ha esborrat n i tots el seus fills esquerres, drets i centrals
// Cost: O(n)
void esborrar(node_tst* &n);

// Funció auxiliar de la destructora de la classe
// Pre: *cert*
// Post: retorna una altra estructura igual a la que apuntaba el node n
// Cost: O(n)
node_tst* copia(node_tst* n, node_tst* ant) throw();

/****** DOCUMENTACIÓ *******\

Hem decidit fer un tst modificat, amb phones no només als ultims nodes de cada nom, sinò que hem posat els phones també als nodes segons
els prefixos. Es a dir, el tst comença amb el node buit, "\0", perque es el "prefix" que has de posar per trucar al primer nom del tst.
El primer node només té un fill central, no té pas esquerre ni dret ni anterior, per què es evident que tots els prefixos posibles abans tindran
el caràcter buit, o sigui, sempre que utilitzes l'easy_dial t'apareixerà el primer nom amb més freqüència i a partir d'aquest afegiras els prefixos.

Llavors utilitzem la variable p_indef de cada node per determinar si el phone que conté aquest node esta definit o no. Això serveix per determinar el
seguent nombre amb més frequencia amb rapidesa. Per que si no l'altra opció seria anar el phones dels fills del node arribant al final del nom de cada
fill i comparar quin es el que té la freqüència més alta.

Amb aquesta implementació doncs, assolim el requisit de l'enunciat de la practica que diu que la funció seguent ha de tenir cost constant
respecte el numero de noms.
Així com també la funció anterior, que també es constant perque tenim un punter sempre que apunta al pare, exepte en l’arrel que es NULL.

Utilitzem un bool anomenat punterNULL que gestiona els casos on actTrie hauria de ser NULL, pero no podem fer una igualació de actTrie a NULL
 per que si no no podriem retornar al node anterior, així doncs quan actTrie hauria de ser NULL punterNULL es true i viceversa.

Les opcions que hem estudiat han estat les seguents:

- TST (comú)
- Trie implementat amb Arbre general (amb noms complerts)
- Vector de punters per node amb tots els caracters ascii
- Arbre general (només els caracters dels prefixos)
- TST (modificat)

TST comú

Vam començar amb aquest i ens vam trobar amb un problema, no podiem saber quin era el nombre amb més freqüència si el node amb el prefix actual
tenia més de dos fills, i també si el fill central d'aquest tenia més de dos fills, i el fill central d'aquest etc.

Trie implementat amb Arbre general (amb noms complerts)

Amb aquest solucionavem el problema que teniem amb el TST, podiem identificar el nombre amb mas freqüència del fills directes d’un node, 
però no podiem saber si algun fill dels fills del node actual tenia més freqüència o no.

Vector de punters per node amb tots els caracters ascii

Aquesta opció es solucionaven tots els problemes anterior. El problema era el que cost espaial era molt gran ja que haviem de tindre 
una taula amb tots el caracters ascii. I la funció ocmença no era eficient, per tant encara que funcionava perfectament vam decidir 
canviar de implementació.

Arbre general (només els caracters dels prefixos)

Aquesta era una bona opció, per què podiem identificar sempre quin era el nom amb més freqüència. El problema estava a la funció comencen, 
que degut a que només guardavem els caracters necesaris i no els noms complerts, la funcio quedava molt enrevessada i no molt eficient.

TST (modificat)

Aquesta última implementació va resultar la que millor s’adaptava als criteris demanats. Bàsicament es com l’arbre general amb només els caracters 
pero li afegim el nom sencer, de manera que quan estem mirant els prefixos en funcions com la de seguent i anterior, 
només ens fixem en els caracters com si es tractés de l’arbre general. Però quan fem la funció comenca aprofitem que tenim 
els noms sencers i d’aquesta manera queda una funció facil i eficient.

*/
